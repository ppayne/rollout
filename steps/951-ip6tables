#!/usr/bin/perl -w
# vim:tw=100 sw=2 expandtab ft=perl
=head1 NAME

951-ip6tables

=head1 DESCRIPTION

Build and activate firewall rules, using ip6tables, the IPv6 version of iptables.

This generates a file suitable for loading with C<ip6tables-restore>. The file contains a set of
basic default rules that allow acceptable limits of ICMPv6, allow whatever is specified in the
C<firewall_accept> block, and reject anything else.

Comments can be added by adding a hash character followed by the comment.

B<WARNING:> If you have I<any> C<firewall_accept> blocks, this step will be enabled. If you don't
have any blocks that allow your SSH access, your session will be disconnected as soon as you run
rollout. B<Be careful.>

This is a I<dangerous step>. It will no make any changes to your system unless forced, using the
C<-f iptables> command line parameter. This is to ensure that running rollout with the default
options won't make your system inaccessable.

=head1 EXAMPLE

  class Sample => {
    firewall_accept => [
      home => '22 # ssh',
      any => '80',
      '2001:4860:4860::/64' => '53:udp # DNS',
    ],
    firewall_drop => [
      '2001:4860:4860::8888' => '53:udp',
      '2001:E18::/32' => 'any # China Unicom Hebei Province Network',
    ],
  };

Note that this block is shared with the iptables script so that any
IPv4-specific addresses will be handled by that script and any
IPv6-specific addresses will be handled by this script. Any generic
rules related to a port will be handled by both scripts.

=head1 SKIPPABLE STEPS

=over

=item firewall

Configure the local host-based firewall

=item iptables

Configure the local host-based firewall using iptables

=back

=head1 COPYRIGHT

Copyright 2010 David Parrish

=cut

validate_config {
  firewall_accept => {
    help => "List of source addresses and destination ports to accept",
    type => "list",
    items => {
      type => "string",
    },
  },
  firewall_drop => {
    help => "List of source addresses and destination ports to reject",
    type => "list",
    items => {
      type => "string",
    },
  },
  firewall_append => {
    help => "List of iptables rules to inject at the end of the ruleset (before drop)",
    type => "list",
    items => {
      type => "string",
    },
  },
};

dangerous_step;

return unless i_should("firewall") && i_should('iptables');
my @accept = flatten_list(c("$hostname/firewall_accept"), c("$hostname/firewall_allow"));
my @drop = flatten_list(c("$hostname/firewall_drop"), c("$hostname/firewall_deny"));
my @append = flatten_list(c("$hostname/firewall_append"));
return unless (@accept || @drop || @append);

# Make sure iptables is installed
if (i_distro("debian", "ubuntu")) {
  package_check("iptables");
  dir_check("/var/lib/iptables");
  file_modify("/etc/default/iptables6", undef,
              [ 's/enable_autosave=true/enable_autosave=false/',
                's/enable_save_counters=true/enable_save_counters=false/' ])
    if -f "/etc/default/iptables6";
}
elsif (i_distro("redhat")) {
  package_check("iptables");
}
else {
  w "Don't know how to manage iptables on ". i_os(). " ". i_distro();
}

my @rules;
push @rules, (
  "*filter",
  ":INPUT ACCEPT [0:0]",
  ":FORWARD ACCEPT [0:0]",
  ":OUTPUT ACCEPT [0:0]",
  "",
  "# predefine chains",
  ":ratelimit - [0:0]",
  ":loganddrop - [0:0]",
  ":logger - [0:0]",
  ":icmp - [0:0]",
  ":inputdrop - [0:0]",
  "",
  "# standard setup",
  "-A INPUT -i lo+ -j ACCEPT",
  "-A INPUT -i tap+ -j ACCEPT",
  "-A INPUT -i tun+ -j ACCEPT",
  "-A INPUT -m state --state ESTABLISHED -j ACCEPT",
  "-A INPUT -m state --state RELATED -j ACCEPT",
  "-A INPUT -p icmpv6 -j icmp",
  "",
  "# chain icmp",
  "-A icmp -p icmpv6 --icmpv6-type echo-request -m comment --comment \"echo-request\"",
  "-A icmp -p icmpv6 --icmpv6-type echo-reply -m comment --comment \"echo-reply\"",
  "-A icmp -p icmpv6 --icmpv6-type destination-unreachable -m comment --comment \"destination-unreachable\"",
  "-A icmp -p icmpv6 --icmpv6-type time-exceeded -m comment --comment \"time-exceeded\"",
  "-A icmp -p icmpv6 -j ratelimit",
  "-A icmp -p icmpv6 -j ACCEPT",
  "",
  "# chain ratelimit",
  "-A ratelimit -m limit --limit 5/second --limit-burst 20 -j RETURN",
  "-A ratelimit -j loganddrop",
  "",
  "# chain loganddrop (prevent flooding log)",
  "-A loganddrop -m limit --limit 1/minute --limit-burst 3 -j logger",
  "-A loganddrop -j DROP",
  "",
  "# chain logger (actually log event)",
  "-A logger -j LOG --log-prefix \"ip6tables: \" --log-tcp-sequence --log-ip-options",
  "-A logger -j RETURN",
  "",
  "# drop rules",
);

push @rules, "-A INPUT -p udp --sport bootps -j DROP" unless i_isa("Dhcp_Server");

sub add_6_rules {
  my $chain = shift;
  my $action = shift;
  for (my $i = 0; $i < @_; $i += 2) {
    my($source, $port) = ($_[$i], $_[$i + 1]);
    if ($source =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/) {
      next; # skip IPv4 specific addresses
    }
    if ($source =~ /^#/) {
      push @rules, $source;
      $i--;
      next;
    }
    my $comment = "";
    $comment = $1 if ($port =~ s/\s*\#\s*(.*?)\s*$//);
    my $proto = "tcp";
    $proto = $1 if ($port =~ s/:(udp|tcp)$//);

    if ( $source =~ /[a-zA-Z]/ ) {
      v "network $source = " . join(',',_expand_network($source))."\n";
    }
    my @hosts = $source eq 'any' ? () : _expand_network($source);
    if ($source ne 'any' && $source =~ /[a-zA-Z]/ && !@hosts) {
      # Class name, skip it
      w "Can't expand network $source" and next if $source =~ /^[A-Z]/;
      # All lower case, assume it's a host name
      @hosts = ($source);
    }
    if (($source eq 'any') && ($port eq 'any')) {
      throw ConfigException "Source and destination port cannot both be \"any\"" ;
    }
    @hosts = (undef) unless @hosts;
    push @rules, "# $action $port from $source";
    foreach (@hosts) {
      next if ( $_ && ( $_ =~ m/(\d+)\.(\d+)\.(\d+)\.(\d+)/ ) ); # skip IPv4 addresses
      push @rules, "-A $chain". ($_ ? " -s $_" : ""). ($port eq 'any' ? "" : " -p $proto"). ($port eq 'any' ? "" : " --dport $port"). " -j $action". (length($comment) ? " -m comment --comment \"$comment\"" : "");
    }
  }
}

add_6_rules('inputdrop', 'DROP', @drop);

push @rules, (
  "",
  "# host specific rules",
  "-A INPUT -j inputdrop",
);
add_6_rules('INPUT', 'ACCEPT', @accept);
push @rules, @append;

push @rules, (
  "# log & drop everything else",
  "-A INPUT -j loganddrop",
  "",
  "# safety rules, will never get called",
  "-A INPUT -p tcp -j REJECT --reject-with tcp-reset",
  "-A INPUT -p udp -j REJECT --reject-with icmp6-port-unreachable",
  "-A INPUT -j REJECT",
  "",
  "# don't forward anything",
  "-A FORWARD -j DROP",
  "COMMIT",
);

my @nat_append = flatten_list(c("$hostname/firewall_nat_append"));
if (@nat_append && i_should("firewall_nat_append")) {
  push @rules,
    "*nat",
    ":PREROUTING ACCEPT [0:0]",
    ":POSTROUTING ACCEPT [0:0]",
    ":OUTPUT ACCEPT [0:0]",
    @nat_append,
    "COMMIT";
}

my @mangle_append = flatten_list(c("$hostname/firewall_mangle_append"));
if (@mangle_append && i_should("firewall_mangle_append")) {
  push @rules,
    "*mangle",
    ":PREROUTING ACCEPT [0:0]",
    ":INPUT ACCEPT [0:0]",
    ":FORWARD ACCEPT [0:0]",
    ":OUTPUT ACCEPT [0:0]",
    ":POSTROUTING ACCEPT [0:0]",
    @mangle_append,
    "COMMIT";
}

my $changes = 0;
my $text = join("", map { "$_\n" } @rules);
if (i_distro("redhat")) {
  text_install("/etc/sysconfig/iptables6", $text,
               "ip6tables-restore /etc/sysconfig/ip6tables") and $changes++;
} elsif (i_distro("debian", "ubuntu")) {
  dir_check("/var/lib/iptables");
  text_install("/var/lib/iptables/active6", $text,
               "ip6tables-restore /var/lib/iptables/active6") and $changes++;
}

if ($safe_mode && $changes) {
  v "ip6tables active file would be changed to:";
  v $text;

  w "Firewall config is considered dangerous, changes won't be applied unless you specify the ".
    "\"-f iptables6\" argument.";
}
